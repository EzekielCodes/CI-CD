image: rockylinux:8.5

stages:
  - prepare
  - config
  - deploy

before_script:
  - yum update -y
  - yum install -y python3
  - yum install python3-pip
  - python3 -m pip install --upgrade pip
  - pip3 install virtualenv
  - python3 -m venv container
  - source container/bin/activate
  - pip3 install --upgrade pip
  - pip3 install -r requirements.txt
  - ansible-galaxy collection install cisco.ios


prepare-ansible:
  stage: prepare
  script:
    - pip3 install ansible-lint
    - cd ansible
    - ansible-lint playbook-dev.yml -v
    
  #rules:
   # - if: $CI_PIPELINE_SOURCE == "push"
    #- if: $CI_COMMIT_BRANCH == "develop"
  
  only:
    - development


config-cml:
  stage: config
  script:
    - echo "$Vars" > /root/.virlrc
    - cat /root/.virlrc
    - cml ls
    - cml up -f cml/development/dev.yaml --provision
    - cml ls
    - cml clear
    - chmod 700 ansible
   # - cd ansible
   # - export ANSIBLE_CONFIG=ansible.cfg
   # - ansible-playbook playbook-dev.yml
    - cml ls
    #- cml rm -f --no-confirm
    - ANSIBLE_CONFIG=$PWD/ansible/ansible.cfg ansible-playbook ansible/playbook-dev.yml
    #- "[ --s ansible/backup/running-config.cfg ] || exit 1" 
    - "[ -s ansible/backup/running-config.cfg ] || exit 1"
    
  artifacts:
    paths:
      - ansible/backup/running-config.cfg
    when: on_success

  only:
    - development

    
  #rules:
   # - if: $CI_PIPELINE_SOURCE == "push"
    #- if: $CI_COMMIT_BRANCH == "develop"

#deploy-prod:
 # stage: deploy
  #script: 
   # - cml clear
   # - cml ls
   # - cml up -f cml/production/prod.yaml --provision
   # - cml save --extract -f ../lab-topology-production.yml

   #artifacts:
    #paths:
     # - ansible/backup/running-config.cfg